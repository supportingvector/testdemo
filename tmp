 @Override
    public List<CrStaffCheckResult> batchInsertCrShowStaff(String batchInput,String showId, String versionName){
        List<CrStaffRaw> crStaffRawList = parseString(batchInput);
        List<CrStaffCheckResult> checkResults= Check(crStaffRawList, showId, versionName);
        if(checkResults.size()==0){
            InsertItems(crStaffRawList);
        }
        return checkResults;
        //List<String> unsetPositions =  unsetPosition(crStaffRawList);
    }

    private List<CrStaffRaw> parseString(String batchInput){
        String[] lines = batchInput.split("nextline");
        CrOptionList crOptionListQuery =new CrOptionList();
        crOptionListQuery.setOptionId(6l);
        List<CrOptionList> crOptionlist = crOptionListService.selectCrOptionListList(crOptionListQuery);
        HashSet<String> crPositionSet = new HashSet<String>();
        for (CrOptionList crOption:crOptionlist) {
            crPositionSet.add(crOption.getName());
        }
        List<CrStaffRaw> CrStaffRawList =  new LinkedList<>();
        for (String line : lines) {
            String[] parts = line.split(":");
            if (parts.length == 2 ) {
                //演员特殊逻辑处理
                if (parts[0].equals("演员")) {
                    String[] actors = parts[1].split(",");
                    for (String actor : actors) {
                        String[] actorRole = actor.split("=");

                        CrStaffRaw crStaffRaw = new CrStaffRaw();
                        crStaffRaw.name=actorRole[0];
                        crStaffRaw.character=actorRole[1];
                        crStaffRaw.position = "演员";
                        CrStaffRawList.add(crStaffRaw);
                    }
                }
                else {//非演员处理
                    String[] nameList=parts[1].split(",");
                    for(int i=0; i< nameList.length; i++) {
                        String name = nameList[i];
                        CrStaffRaw crStaffRaw = new CrStaffRaw();
                        crStaffRaw.name=name;
                        crStaffRaw.character="";
                        crStaffRaw.position = parts[0];
                        CrStaffRawList.add(crStaffRaw);
                    }
                }
            }
        }
        return CrStaffRawList;
    }

    private List<CrStaffCheckResult> Check(List<CrStaffRaw> items, String showId, String versionName){
        List<CrStaffCheckResult> checkResults= new LinkedList<>();
        CrShowRequestStaffDTO crShowRequestStaffDTO = new CrShowRequestStaffDTO();
        crShowRequestStaffDTO.setShowId(showId);
        crShowRequestStaffDTO.setVersionName(versionName);

        List<CrShowResponseStaffDTO> crShowResponseStaffDTOList=juMuStaffList(crShowRequestStaffDTO);
        CrOptionList crOptionListQuery =new CrOptionList();
        crOptionListQuery.setOptionId(6l);
        List<CrOptionList> crOptionlist = crOptionListService.selectCrOptionListList(crOptionListQuery);
        HashSet<String> crPositionSet = new HashSet<String>();
        for (CrOptionList crOption:crOptionlist) {
            crPositionSet.add(crOption.getName());
        }

        for(CrStaffRaw item : items){
            //查询非演员
            if(item.character!=""){
                //查询名称有无添加过
                boolean CheckNameExistsRes=CheckNameExists(item);
                if(!CheckNameExistsRes){
                    CrStaffCheckResult checkResult=new CrStaffCheckResult();
                    checkResult.missing = true;
                    checkResult.data = item.name;
                    checkResults.add(checkResult);
                }

                //查询职位有无添加过
                boolean CheckPositionExistsRes=CheckPositionExists(item,crPositionSet);
                if(!CheckPositionExistsRes){
                    CrStaffCheckResult checkResult=new CrStaffCheckResult();
                    checkResult.missing = true;
                    checkResult.data = item.name;
                    checkResults.add(checkResult);
                }
                //查询当前记录有无这一条重复记录
                if(CheckPositionExistsRes && CheckNameExistsRes){
                    boolean checkDuplicatesRes =CheckDuplicate(item, crShowResponseStaffDTOList);
                    if(checkDuplicatesRes){
                        CrStaffCheckResult checkResult=new CrStaffCheckResult();
                        checkResult.duplicated = true;
                        checkResult.data = item.name;
                        checkResults.add(checkResult);
                    }
                }
            }else{
                boolean checkActorNameExitsRes =CheckNameExists(item);
                if(!checkActorNameExitsRes){
                    CrStaffCheckResult checkResult=new CrStaffCheckResult();
                    checkResult.missing = true;
                    checkResult.data = item.name;
                    checkResults.add(checkResult);
                }
                if(checkActorNameExitsRes){
                    boolean checkActorDuplicateRes = CheckActorDuplicate(item,crShowResponseStaffDTOList);
                    if(!checkActorDuplicateRes){
                        CrStaffCheckResult checkResult=new CrStaffCheckResult();
                        checkResult.missing = true;
                        checkResult.data = item.name;
                        checkResults.add(checkResult);
                    }
                }
            }
        }
        return checkResults;

    }

    private boolean CheckNameExists(CrStaffRaw item){
        List<CrStaff> selectRes=crStaffService.selectCrStaffList1(item.name);
        if(selectRes.size()>0) return  true;
        return false;
    }

    private boolean CheckPositionExists(CrStaffRaw item, Set positionSet){
        if(positionSet.contains(item.position)){
            return true;
        }
        return false;
    }
    private boolean CheckDuplicate(CrStaffRaw item,List<CrShowResponseStaffDTO> crShowResponseStaffDTOList){
        for(CrShowResponseStaffDTO crShowResponseStaffDTO: crShowResponseStaffDTOList){
            if(item.name == crShowResponseStaffDTO.getStaffName() && crShowResponseStaffDTO.getVersionName() == item.versionName){
                return true;
            }
        }
        return false;
    }


    private boolean CheckActorDuplicate(CrStaffRaw item, List<CrShowResponseStaffDTO> crShowResponseStaffDTOList){
        for(CrShowResponseStaffDTO crShowResponseStaffDTO: crShowResponseStaffDTOList){
            if(item.name == crShowResponseStaffDTO.getStaffName() && crShowResponseStaffDTO.getVersionName() == item.versionName && crShowResponseStaffDTO.getRoleName() == item.character){
                return true;
            }
        }
        return false;
    }
    private void InsertItems(List<CrStaffRaw> items){
        for(CrStaffRaw crStaffRaw: items){

            CrShowStaffRequestDTO crShowStaffRequestDTO = new CrShowStaffRequestDTO();

            insertCrShowStaff(crStaffRaw);

        }
        return;
    }

{
    "weigh": 100,
    "status": "2",
    "remark": "",
    "crShowRoleDTOList": [
        {
            "key": 1722259119833,
            "roleId": "",
            "versionId": 3327,
            "avatar": ""
        }
    ],
    "versionId": 3327,
    "positionId": 68,
    "showId": "47822960",
    "positionId2": 0,
    "type": 1
}
